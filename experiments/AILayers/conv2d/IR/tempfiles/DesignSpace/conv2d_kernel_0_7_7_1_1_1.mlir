module {
  func.func @conv2d_kernel_0(%arg0: memref<1x3x64x64xf32>, %arg1: memref<6x3x7x7xf32>, %arg2: memref<1x6x58x58xf32>) attributes {Kernel, conv2d_kernel_0} {
    %c0 = arith.constant 0 : index
    %c0_0 = arith.constant 0 : index
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    affine.for %arg3 = 0 to 1 {
      affine.for %arg4 = 0 to 6 {
        affine.for %arg5 = 0 to 58 step 2 {
          %0 = ADORA.BlockLoad %arg2 [%arg3, %arg4, %arg5, 0] : memref<1x6x58x58xf32> -> memref<1x1x2x58xf32>  {Id = "0", KernelName = "conv2d_kernel_0"}
          %1 = ADORA.BlockLoad %arg0 [%arg3, 0, %arg5, 0] : memref<1x3x64x64xf32> -> memref<1x3x8x64xf32>  {Id = "1", KernelName = "conv2d_kernel_0"}
          %2 = ADORA.BlockLoad %arg1 [%arg4, 0, 0, 0] : memref<6x3x7x7xf32> -> memref<2x3x7x7xf32>  {Id = "2", KernelName = "conv2d_kernel_0"}
          %3 = ADORA.LocalMemAlloc memref<1x1x2x58xf32>  {Id = "3", KernelName = "conv2d_kernel_0"}
          ADORA.kernel {
            affine.for %arg6 = 0 to 2 {
              affine.for %arg7 = 0 to 58 {
                %4 = affine.load %0[0, 0, %arg6, %arg7] : memref<1x1x2x58xf32>
                %5 = affine.for %arg8 = 0 to 3 iter_args(%arg9 = %4) -> (f32) {
                  %6 = affine.load %1[0, %arg8, %arg6, %arg7] : memref<1x3x8x64xf32>
                  %7 = affine.load %2[0, %arg8, 0, 0] : memref<2x3x7x7xf32>
                  %8 = arith.mulf %6, %7 : f32
                  %9 = arith.addf %arg9, %8 : f32
                  %c1 = arith.constant 1 : index
                  %10 = affine.load %1[0, %arg8, %arg6, %arg7 + 1] : memref<1x3x8x64xf32>
                  %11 = affine.load %2[0, %arg8, 0, 1] : memref<2x3x7x7xf32>
                  %12 = arith.mulf %10, %11 : f32
                  %13 = arith.addf %9, %12 : f32
                  %c2 = arith.constant 2 : index
                  %14 = affine.load %1[0, %arg8, %arg6, %arg7 + 2] : memref<1x3x8x64xf32>
                  %15 = affine.load %2[0, %arg8, 0, 2] : memref<2x3x7x7xf32>
                  %16 = arith.mulf %14, %15 : f32
                  %17 = arith.addf %13, %16 : f32
                  %c3 = arith.constant 3 : index
                  %18 = affine.load %1[0, %arg8, %arg6, %arg7 + 3] : memref<1x3x8x64xf32>
                  %19 = affine.load %2[0, %arg8, 0, 3] : memref<2x3x7x7xf32>
                  %20 = arith.mulf %18, %19 : f32
                  %21 = arith.addf %17, %20 : f32
                  %c4 = arith.constant 4 : index
                  %22 = affine.load %1[0, %arg8, %arg6, %arg7 + 4] : memref<1x3x8x64xf32>
                  %23 = affine.load %2[0, %arg8, 0, 4] : memref<2x3x7x7xf32>
                  %24 = arith.mulf %22, %23 : f32
                  %25 = arith.addf %21, %24 : f32
                  %c5 = arith.constant 5 : index
                  %26 = affine.load %1[0, %arg8, %arg6, %arg7 + 5] : memref<1x3x8x64xf32>
                  %27 = affine.load %2[0, %arg8, 0, 5] : memref<2x3x7x7xf32>
                  %28 = arith.mulf %26, %27 : f32
                  %29 = arith.addf %25, %28 : f32
                  %c6 = arith.constant 6 : index
                  %30 = affine.load %1[0, %arg8, %arg6, %arg7 + 6] : memref<1x3x8x64xf32>
                  %31 = affine.load %2[0, %arg8, 0, 6] : memref<2x3x7x7xf32>
                  %32 = arith.mulf %30, %31 : f32
                  %33 = arith.addf %29, %32 : f32
                  %c1_1 = arith.constant 1 : index
                  %34 = affine.load %1[0, %arg8, %arg6 + 1, %arg7] : memref<1x3x8x64xf32>
                  %35 = affine.load %2[0, %arg8, 1, 0] : memref<2x3x7x7xf32>
                  %36 = arith.mulf %34, %35 : f32
                  %37 = arith.addf %33, %36 : f32
                  %c1_2 = arith.constant 1 : index
                  %38 = affine.load %1[0, %arg8, %arg6 + 1, %arg7 + 1] : memref<1x3x8x64xf32>
                  %39 = affine.load %2[0, %arg8, 1, 1] : memref<2x3x7x7xf32>
                  %40 = arith.mulf %38, %39 : f32
                  %41 = arith.addf %37, %40 : f32
                  %c2_3 = arith.constant 2 : index
                  %42 = affine.load %1[0, %arg8, %arg6 + 1, %arg7 + 2] : memref<1x3x8x64xf32>
                  %43 = affine.load %2[0, %arg8, 1, 2] : memref<2x3x7x7xf32>
                  %44 = arith.mulf %42, %43 : f32
                  %45 = arith.addf %41, %44 : f32
                  %c3_4 = arith.constant 3 : index
                  %46 = affine.load %1[0, %arg8, %arg6 + 1, %arg7 + 3] : memref<1x3x8x64xf32>
                  %47 = affine.load %2[0, %arg8, 1, 3] : memref<2x3x7x7xf32>
                  %48 = arith.mulf %46, %47 : f32
                  %49 = arith.addf %45, %48 : f32
                  %c4_5 = arith.constant 4 : index
                  %50 = affine.load %1[0, %arg8, %arg6 + 1, %arg7 + 4] : memref<1x3x8x64xf32>
                  %51 = affine.load %2[0, %arg8, 1, 4] : memref<2x3x7x7xf32>
                  %52 = arith.mulf %50, %51 : f32
                  %53 = arith.addf %49, %52 : f32
                  %c5_6 = arith.constant 5 : index
                  %54 = affine.load %1[0, %arg8, %arg6 + 1, %arg7 + 5] : memref<1x3x8x64xf32>
                  %55 = affine.load %2[0, %arg8, 1, 5] : memref<2x3x7x7xf32>
                  %56 = arith.mulf %54, %55 : f32
                  %57 = arith.addf %53, %56 : f32
                  %c6_7 = arith.constant 6 : index
                  %58 = affine.load %1[0, %arg8, %arg6 + 1, %arg7 + 6] : memref<1x3x8x64xf32>
                  %59 = affine.load %2[0, %arg8, 1, 6] : memref<2x3x7x7xf32>
                  %60 = arith.mulf %58, %59 : f32
                  %61 = arith.addf %57, %60 : f32
                  %c2_8 = arith.constant 2 : index
                  %62 = affine.load %1[0, %arg8, %arg6 + 2, %arg7] : memref<1x3x8x64xf32>
                  %63 = affine.load %2[0, %arg8, 2, 0] : memref<2x3x7x7xf32>
                  %64 = arith.mulf %62, %63 : f32
                  %65 = arith.addf %61, %64 : f32
                  %c1_9 = arith.constant 1 : index
                  %66 = affine.load %1[0, %arg8, %arg6 + 2, %arg7 + 1] : memref<1x3x8x64xf32>
                  %67 = affine.load %2[0, %arg8, 2, 1] : memref<2x3x7x7xf32>
                  %68 = arith.mulf %66, %67 : f32
                  %69 = arith.addf %65, %68 : f32
                  %c2_10 = arith.constant 2 : index
                  %70 = affine.load %1[0, %arg8, %arg6 + 2, %arg7 + 2] : memref<1x3x8x64xf32>
                  %71 = affine.load %2[0, %arg8, 2, 2] : memref<2x3x7x7xf32>
                  %72 = arith.mulf %70, %71 : f32
                  %73 = arith.addf %69, %72 : f32
                  %c3_11 = arith.constant 3 : index
                  %74 = affine.load %1[0, %arg8, %arg6 + 2, %arg7 + 3] : memref<1x3x8x64xf32>
                  %75 = affine.load %2[0, %arg8, 2, 3] : memref<2x3x7x7xf32>
                  %76 = arith.mulf %74, %75 : f32
                  %77 = arith.addf %73, %76 : f32
                  %c4_12 = arith.constant 4 : index
                  %78 = affine.load %1[0, %arg8, %arg6 + 2, %arg7 + 4] : memref<1x3x8x64xf32>
                  %79 = affine.load %2[0, %arg8, 2, 4] : memref<2x3x7x7xf32>
                  %80 = arith.mulf %78, %79 : f32
                  %81 = arith.addf %77, %80 : f32
                  %c5_13 = arith.constant 5 : index
                  %82 = affine.load %1[0, %arg8, %arg6 + 2, %arg7 + 5] : memref<1x3x8x64xf32>
                  %83 = affine.load %2[0, %arg8, 2, 5] : memref<2x3x7x7xf32>
                  %84 = arith.mulf %82, %83 : f32
                  %85 = arith.addf %81, %84 : f32
                  %c6_14 = arith.constant 6 : index
                  %86 = affine.load %1[0, %arg8, %arg6 + 2, %arg7 + 6] : memref<1x3x8x64xf32>
                  %87 = affine.load %2[0, %arg8, 2, 6] : memref<2x3x7x7xf32>
                  %88 = arith.mulf %86, %87 : f32
                  %89 = arith.addf %85, %88 : f32
                  %c3_15 = arith.constant 3 : index
                  %90 = affine.load %1[0, %arg8, %arg6 + 3, %arg7] : memref<1x3x8x64xf32>
                  %91 = affine.load %2[0, %arg8, 3, 0] : memref<2x3x7x7xf32>
                  %92 = arith.mulf %90, %91 : f32
                  %93 = arith.addf %89, %92 : f32
                  %c1_16 = arith.constant 1 : index
                  %94 = affine.load %1[0, %arg8, %arg6 + 3, %arg7 + 1] : memref<1x3x8x64xf32>
                  %95 = affine.load %2[0, %arg8, 3, 1] : memref<2x3x7x7xf32>
                  %96 = arith.mulf %94, %95 : f32
                  %97 = arith.addf %93, %96 : f32
                  %c2_17 = arith.constant 2 : index
                  %98 = affine.load %1[0, %arg8, %arg6 + 3, %arg7 + 2] : memref<1x3x8x64xf32>
                  %99 = affine.load %2[0, %arg8, 3, 2] : memref<2x3x7x7xf32>
                  %100 = arith.mulf %98, %99 : f32
                  %101 = arith.addf %97, %100 : f32
                  %c3_18 = arith.constant 3 : index
                  %102 = affine.load %1[0, %arg8, %arg6 + 3, %arg7 + 3] : memref<1x3x8x64xf32>
                  %103 = affine.load %2[0, %arg8, 3, 3] : memref<2x3x7x7xf32>
                  %104 = arith.mulf %102, %103 : f32
                  %105 = arith.addf %101, %104 : f32
                  %c4_19 = arith.constant 4 : index
                  %106 = affine.load %1[0, %arg8, %arg6 + 3, %arg7 + 4] : memref<1x3x8x64xf32>
                  %107 = affine.load %2[0, %arg8, 3, 4] : memref<2x3x7x7xf32>
                  %108 = arith.mulf %106, %107 : f32
                  %109 = arith.addf %105, %108 : f32
                  %c5_20 = arith.constant 5 : index
                  %110 = affine.load %1[0, %arg8, %arg6 + 3, %arg7 + 5] : memref<1x3x8x64xf32>
                  %111 = affine.load %2[0, %arg8, 3, 5] : memref<2x3x7x7xf32>
                  %112 = arith.mulf %110, %111 : f32
                  %113 = arith.addf %109, %112 : f32
                  %c6_21 = arith.constant 6 : index
                  %114 = affine.load %1[0, %arg8, %arg6 + 3, %arg7 + 6] : memref<1x3x8x64xf32>
                  %115 = affine.load %2[0, %arg8, 3, 6] : memref<2x3x7x7xf32>
                  %116 = arith.mulf %114, %115 : f32
                  %117 = arith.addf %113, %116 : f32
                  %c4_22 = arith.constant 4 : index
                  %118 = affine.load %1[0, %arg8, %arg6 + 4, %arg7] : memref<1x3x8x64xf32>
                  %119 = affine.load %2[0, %arg8, 4, 0] : memref<2x3x7x7xf32>
                  %120 = arith.mulf %118, %119 : f32
                  %121 = arith.addf %117, %120 : f32
                  %c1_23 = arith.constant 1 : index
                  %122 = affine.load %1[0, %arg8, %arg6 + 4, %arg7 + 1] : memref<1x3x8x64xf32>
                  %123 = affine.load %2[0, %arg8, 4, 1] : memref<2x3x7x7xf32>
                  %124 = arith.mulf %122, %123 : f32
                  %125 = arith.addf %121, %124 : f32
                  %c2_24 = arith.constant 2 : index
                  %126 = affine.load %1[0, %arg8, %arg6 + 4, %arg7 + 2] : memref<1x3x8x64xf32>
                  %127 = affine.load %2[0, %arg8, 4, 2] : memref<2x3x7x7xf32>
                  %128 = arith.mulf %126, %127 : f32
                  %129 = arith.addf %125, %128 : f32
                  %c3_25 = arith.constant 3 : index
                  %130 = affine.load %1[0, %arg8, %arg6 + 4, %arg7 + 3] : memref<1x3x8x64xf32>
                  %131 = affine.load %2[0, %arg8, 4, 3] : memref<2x3x7x7xf32>
                  %132 = arith.mulf %130, %131 : f32
                  %133 = arith.addf %129, %132 : f32
                  %c4_26 = arith.constant 4 : index
                  %134 = affine.load %1[0, %arg8, %arg6 + 4, %arg7 + 4] : memref<1x3x8x64xf32>
                  %135 = affine.load %2[0, %arg8, 4, 4] : memref<2x3x7x7xf32>
                  %136 = arith.mulf %134, %135 : f32
                  %137 = arith.addf %133, %136 : f32
                  %c5_27 = arith.constant 5 : index
                  %138 = affine.load %1[0, %arg8, %arg6 + 4, %arg7 + 5] : memref<1x3x8x64xf32>
                  %139 = affine.load %2[0, %arg8, 4, 5] : memref<2x3x7x7xf32>
                  %140 = arith.mulf %138, %139 : f32
                  %141 = arith.addf %137, %140 : f32
                  %c6_28 = arith.constant 6 : index
                  %142 = affine.load %1[0, %arg8, %arg6 + 4, %arg7 + 6] : memref<1x3x8x64xf32>
                  %143 = affine.load %2[0, %arg8, 4, 6] : memref<2x3x7x7xf32>
                  %144 = arith.mulf %142, %143 : f32
                  %145 = arith.addf %141, %144 : f32
                  %c5_29 = arith.constant 5 : index
                  %146 = affine.load %1[0, %arg8, %arg6 + 5, %arg7] : memref<1x3x8x64xf32>
                  %147 = affine.load %2[0, %arg8, 5, 0] : memref<2x3x7x7xf32>
                  %148 = arith.mulf %146, %147 : f32
                  %149 = arith.addf %145, %148 : f32
                  %c1_30 = arith.constant 1 : index
                  %150 = affine.load %1[0, %arg8, %arg6 + 5, %arg7 + 1] : memref<1x3x8x64xf32>
                  %151 = affine.load %2[0, %arg8, 5, 1] : memref<2x3x7x7xf32>
                  %152 = arith.mulf %150, %151 : f32
                  %153 = arith.addf %149, %152 : f32
                  %c2_31 = arith.constant 2 : index
                  %154 = affine.load %1[0, %arg8, %arg6 + 5, %arg7 + 2] : memref<1x3x8x64xf32>
                  %155 = affine.load %2[0, %arg8, 5, 2] : memref<2x3x7x7xf32>
                  %156 = arith.mulf %154, %155 : f32
                  %157 = arith.addf %153, %156 : f32
                  %c3_32 = arith.constant 3 : index
                  %158 = affine.load %1[0, %arg8, %arg6 + 5, %arg7 + 3] : memref<1x3x8x64xf32>
                  %159 = affine.load %2[0, %arg8, 5, 3] : memref<2x3x7x7xf32>
                  %160 = arith.mulf %158, %159 : f32
                  %161 = arith.addf %157, %160 : f32
                  %c4_33 = arith.constant 4 : index
                  %162 = affine.load %1[0, %arg8, %arg6 + 5, %arg7 + 4] : memref<1x3x8x64xf32>
                  %163 = affine.load %2[0, %arg8, 5, 4] : memref<2x3x7x7xf32>
                  %164 = arith.mulf %162, %163 : f32
                  %165 = arith.addf %161, %164 : f32
                  %c5_34 = arith.constant 5 : index
                  %166 = affine.load %1[0, %arg8, %arg6 + 5, %arg7 + 5] : memref<1x3x8x64xf32>
                  %167 = affine.load %2[0, %arg8, 5, 5] : memref<2x3x7x7xf32>
                  %168 = arith.mulf %166, %167 : f32
                  %169 = arith.addf %165, %168 : f32
                  %c6_35 = arith.constant 6 : index
                  %170 = affine.load %1[0, %arg8, %arg6 + 5, %arg7 + 6] : memref<1x3x8x64xf32>
                  %171 = affine.load %2[0, %arg8, 5, 6] : memref<2x3x7x7xf32>
                  %172 = arith.mulf %170, %171 : f32
                  %173 = arith.addf %169, %172 : f32
                  %c6_36 = arith.constant 6 : index
                  %174 = affine.load %1[0, %arg8, %arg6 + 6, %arg7] : memref<1x3x8x64xf32>
                  %175 = affine.load %2[0, %arg8, 6, 0] : memref<2x3x7x7xf32>
                  %176 = arith.mulf %174, %175 : f32
                  %177 = arith.addf %173, %176 : f32
                  %c1_37 = arith.constant 1 : index
                  %178 = affine.load %1[0, %arg8, %arg6 + 6, %arg7 + 1] : memref<1x3x8x64xf32>
                  %179 = affine.load %2[0, %arg8, 6, 1] : memref<2x3x7x7xf32>
                  %180 = arith.mulf %178, %179 : f32
                  %181 = arith.addf %177, %180 : f32
                  %c2_38 = arith.constant 2 : index
                  %182 = affine.load %1[0, %arg8, %arg6 + 6, %arg7 + 2] : memref<1x3x8x64xf32>
                  %183 = affine.load %2[0, %arg8, 6, 2] : memref<2x3x7x7xf32>
                  %184 = arith.mulf %182, %183 : f32
                  %185 = arith.addf %181, %184 : f32
                  %c3_39 = arith.constant 3 : index
                  %186 = affine.load %1[0, %arg8, %arg6 + 6, %arg7 + 3] : memref<1x3x8x64xf32>
                  %187 = affine.load %2[0, %arg8, 6, 3] : memref<2x3x7x7xf32>
                  %188 = arith.mulf %186, %187 : f32
                  %189 = arith.addf %185, %188 : f32
                  %c4_40 = arith.constant 4 : index
                  %190 = affine.load %1[0, %arg8, %arg6 + 6, %arg7 + 4] : memref<1x3x8x64xf32>
                  %191 = affine.load %2[0, %arg8, 6, 4] : memref<2x3x7x7xf32>
                  %192 = arith.mulf %190, %191 : f32
                  %193 = arith.addf %189, %192 : f32
                  %c5_41 = arith.constant 5 : index
                  %194 = affine.load %1[0, %arg8, %arg6 + 6, %arg7 + 5] : memref<1x3x8x64xf32>
                  %195 = affine.load %2[0, %arg8, 6, 5] : memref<2x3x7x7xf32>
                  %196 = arith.mulf %194, %195 : f32
                  %197 = arith.addf %193, %196 : f32
                  %c6_42 = arith.constant 6 : index
                  %198 = affine.load %1[0, %arg8, %arg6 + 6, %arg7 + 6] : memref<1x3x8x64xf32>
                  %199 = affine.load %2[0, %arg8, 6, 6] : memref<2x3x7x7xf32>
                  %200 = arith.mulf %198, %199 : f32
                  %201 = arith.addf %197, %200 : f32
                  affine.yield %201 : f32
                }
                affine.store %5, %3[0, 0, %arg6, %arg7] : memref<1x1x2x58xf32>
              }
            }
            ADORA.terminator
          } {KernelName = "conv2d_kernel_0"}
          ADORA.BlockStore %3, %arg2 [0, %arg4, %arg5, 0] : memref<1x1x2x58xf32> -> memref<1x6x58x58xf32>  {Id = "3", KernelName = "conv2d_kernel_0"}
        }
      }
    }
    return
  }
}
