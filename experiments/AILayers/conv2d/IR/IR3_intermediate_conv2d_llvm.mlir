// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
  %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
  %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
  affine.for %arg2 = 0 to 1 {
    affine.for %arg3 = 0 to 6 {
      affine.for %arg4 = 0 to 58 {
        affine.for %arg5 = 0 to 58 {
          %2 = affine.load %0[%arg3] : memref<6xf32>
          affine.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
        }
      }
    }
  }
  call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
  return
}

// -----// IR Dump After PromoteBuffersToStack (promote-buffers-to-stack) //----- //
func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)

// -----// IR Dump After ArithExpandOps (arith-expand) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    affine.for %arg2 = 0 to 1 {
      affine.for %arg3 = 0 to 6 {
        affine.for %arg4 = 0 to 58 {
          affine.for %arg5 = 0 to 58 {
            %2 = affine.load %0[%arg3] : memref<6xf32>
            affine.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
          }
        }
      }
    }
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ExpandOps (memref-expand) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    affine.for %arg2 = 0 to 1 {
      affine.for %arg3 = 0 to 6 {
        affine.for %arg4 = 0 to 58 {
          affine.for %arg5 = 0 to 58 {
            %2 = affine.load %0[%arg3] : memref<6xf32>
            affine.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
          }
        }
      }
    }
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After NormalizeMemRefs (normalize-memrefs) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    affine.for %arg2 = 0 to 1 {
      affine.for %arg3 = 0 to 6 {
        affine.for %arg4 = 0 to 58 {
          affine.for %arg5 = 0 to 58 {
            %2 = affine.load %0[%arg3] : memref<6xf32>
            affine.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
          }
        }
      }
    }
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ExpandStridedMetadata (expand-strided-metadata) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    affine.for %arg2 = 0 to 1 {
      affine.for %arg3 = 0 to 6 {
        affine.for %arg4 = 0 to 58 {
          affine.for %arg5 = 0 to 58 {
            %2 = affine.load %0[%arg3] : memref<6xf32>
            affine.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
          }
        }
      }
    }
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ConvertAffineToStandard (lower-affine) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_0 = arith.constant 1 : index
    scf.for %arg2 = %c0 to %c1 step %c1_0 {
      %c0_1 = arith.constant 0 : index
      %c6 = arith.constant 6 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg3 = %c0_1 to %c6 step %c1_2 {
        %c0_3 = arith.constant 0 : index
        %c58 = arith.constant 58 : index
        %c1_4 = arith.constant 1 : index
        scf.for %arg4 = %c0_3 to %c58 step %c1_4 {
          %c0_5 = arith.constant 0 : index
          %c58_6 = arith.constant 58 : index
          %c1_7 = arith.constant 1 : index
          scf.for %arg5 = %c0_5 to %c58_6 step %c1_7 {
            %2 = memref.load %0[%arg3] : memref<6xf32>
            memref.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
          }
        }
      }
    }
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After SCFForLoopCanonicalization (scf-for-loop-canonicalization) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %c58 = arith.constant 58 : index
    %c6 = arith.constant 6 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    scf.for %arg2 = %c0 to %c1 step %c1 {
      scf.for %arg3 = %c0 to %c6 step %c1 {
        scf.for %arg4 = %c0 to %c58 step %c1 {
          scf.for %arg5 = %c0 to %c58 step %c1 {
            %2 = memref.load %0[%arg3] : memref<6xf32>
            memref.store %2, %arg1[%arg2, %arg3, %arg4, %arg5] : memref<1x6x58x58xf32>
          }
        }
      }
    }
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x00F3E3BCE91499BC4D0F9C3C936104BD580BEBBC1942923DEDD7DA3BC9C2963D2F36BD3C2DC4CB3C38CFA43D90A9D0BC7E658ABD090572BD4436BABC358A7E3DAAAE4FBD66939F3DFC120E3D0A308D3D83ECA5BD3B6D8CBD96B889BD1FCA88BD04DF43BDF4DB943D7DE16E3D6B26A23D772F733DCD41653BB4FC2FBCFD2B593D19F3773D55F176BDC9E1A13DEC01243D0410D5BBD5236C3C00FE183C0F4BEB3C1E6F7F3DFE6234BD550FE7BC97680F3D9E5921BC667D993D42619CBD393584BD90C694BB19A06C3D9BF046BD98797A3D59A79B3D7A97B63C0A45D6BC7E0B283DA2A521BD5CB3EABBE7588B3D5F2F473D0F34F23CACA068BD5A88C93C3649613CDC5F2EBDA80F43BDBE098CBDD82076BD64A80D3D5CF031BDC6C4F73C17CA43BBC0D7A4BCF537CC3C2D8C3FBB4A174B3D3C8A283D4EE2E8BC3947453D8012993D70CA143D996491BD41F74CBD88BA2D3D8C14F93AE1C79ABCE70459BDD07601BDAC8614BD47CEA8BC2E6335BD8A1E6D3DB0879A3D3F9C3E3D2EEB7EBD6B11723DC3F392BD085D823D390F1BBC23CBA9BBEAC1243CC78E803DBE4C75BB632A7E3A836796BC2AC5A33D4F474ABD9872B5BCB8BBD73CA6AA28BD377DA13D650B81BDD1BB1A3D40DD8ABC92B3C63CD65B66BD190C7BBD5812583D74BAE4BB8F8FD6BC62C5A3BD2AA8A33D8F769E3DAC4B543CEB06673D09449BBD0A5FE8BB0AF14DBD1DCC6ABDDBF78C3D98C81E3B709A85BDF6AB8CBDA88F51BD59A992BD0362CDBCD010CDBBCFB4A43D5D7184BD3688633B0588CFBB3105753C40D5353D66C7473DC9F7253CD2AB9BBD38B8523DE6AF4CBC924AE73B714514BD889EA5BDDA9EA2BCB863843D77781E3C1C15853D507E66BD41E6C0BA8E090F3D90141ABD06AB563D506318BCA78B18BD42013BBDE825723D77E68F3D5A0C963C5AF02BBD8E9851BD4F5C373D8A02933C274807BCA927803C2FB52EBC8E600DBDD9CB6BBD50F88C3C172B0B3D05B496BD72B501BDE750233C5BB7823D21AF5CBC5D245BBD94B80A3D5DDCF13C64B1A2BDB86229BC822A42BD48337D3C9A8079BDCF099DBC77CC9FBCC1AAE8BACB28A13D69A051BD301900BD6F11803D3CFEA73DD4F0703DC4FA763D4173913D60E08B3DF7FE483D64BBDA3A538FB73C0A26B7BBA4758DBD95C9AABB99FF783CCE34533D52C8453D407560BDBFF095BD4AAA5B3C13886C3DCA13493D559485BCA77BB73C0282133BBB48D33B5174163CFC9E98BCF18A953AB7F1A3BDA9A25BBCE2EB6BBD6E435C3D30128ABD1E78A23DA469A43C2501B5BC7BD4503DCB51303D5DFD1C3D220266BD2EC7833D422F54BDF5635CBDC547CF3CF680373D0EC7A03D674734BBD3CC9C3D552F6A3DA66F91BD49892F3D047CCA3C122FC6BB52D49E3DD84296BD5BFB843CEB16AFBBC917773D2AC78C3D03190FBDE8AFA83D5D08DB3CCF6AA5BD5FBB9C3C66FF84BD948811BC25A28B3DE2A0F9BC8B83BB3ACDD027BDB67C9DBDF0A1B8BB5FF2693D0E5D31BDDCBB073D7A7C663D4397863D06FFA1BD4FE0CABCB63021BCDF2C2F3D549B22BC21833E3D7EEF8C3DA9271B3D203C603D4EC4273C818DA83DC3FE3ABD73DB963D51D5E23CAAB4F53CC56B91BDDC7B9E3DF914823DDAFF8C3D0DA1A3BC8FE76DBDA8DD693DB21C293C284689BD23423BBD5A2C28BCA883253D361FA53DF6FE86BD44F1173D6A640E3C0FC660BD38CF6EBDBE67DCBC6FA35EBD77E57CBC8553EABCAC2E383DDD65C8BC431495BDB0393FBD47943CBD2702663DD8376CBD9B104A3D94787E3D544FB9BC33F6CEBB0C21D5BC522D1C3D55DB10BCE0039BBD3EFDD2BC57BA48BD00DF99BD01EADEBC853D9CBDEB8081BC651F863DE5DA40BDC3A5F4BC82E780BCFD9B9C3C60CA0A3D239EAABC873E9A3D0D3FA1BD0DBA813D5837C53C28428A3DB204043D0945D4BC6E44A2BD559E8E3C8A7399BDA19568BD7FA5B3BC8274F9BC5C6B4F3DDF3E043DBD10693DBE599B3D5AAE98BD147B7ABDFAFE20BDB4808CBDB6AD003D76407BBD8D9C92BB21F25BBCF0228FB96B892BBDF272233D859B15BDAD8809BCFCDF433CCAAC753C89C3A2BD8B119F3D1929873B4B73BB3B931672BD7D3970BD4CA6763D39577D3D3F1657BD2BF6F03C17DB373D4825FDBC1995903DE049A8BDC522D93C514AB0BBA632A4BC2247853DDBC744BDAD145F3D04446ABB1173C73CD827D3BCCC8B8BBA67C148BD728B2DBD79142B3D0B0436BCBD181A3D9E5D593D6E12A43DD551943CE1E7773DB7FAA43DF13E54BD953E9CBB54D51E3DF07575BC305F873D8E886ABC2DCA453DD71F6EBD5C9F4EBDE9C226BDBEE07C3D85A5D63C3D8AAD3C7253B43BE6A9C93CF01C733DF9D63C3DF0950ABD21F0D2BC72AAA5BDE3868A3DC0D9603DB20F843D0826693D0EBC91BD8016AABCEB4BDD3B3E255EBD1228823D8548A1BD776C173DD223A7BD92377D3B4B488D3C4E60E4BB61A57FBC6EA757BC0CF18F3D0E14323D8B4CB6BBDC4F9C3DD2C22D3CD4C7EE3C287D3D3D4D7EDCBC2E7B4D3D8CFB4D3D315D7A3DB8C2443C97588A3D6731D4BA855C61BD3ED28EBD05134DBD621E8FBD339BBD3CCCB004BD59B01E3B6F9C6E3D7AB62C3B9DFB523B118C6C3D7C0692BCCFC23DBD12CB183DA77337BD1080A23DE6E69EBDCFD542BD0A3B5C3C5D36123CD211363CF1DF19BDC9B3FD3BD7DAE5BCB4F79F3D086194BDD6C2D73C9FC7933BD70C8E3DE7CCD93C4AE7A7BDEE042CBD3BAE5F3D1B4F923C3284483D589408BD4343CE3C2291B2BCE57D2CBDED39503CDB61F53BA39073BD6DCB98BDD1DA163D012F1D39598986BD8A03A3BC7D5B9CBCC296D6BC055B3C3C179F893D0029F9BCAA29A1BDC70FEE3B3340A83D23505DBDBBDA733DEEE354BCB5AC963DB32C5CBD1EACADBC1085783D7199513DD9A98DBC548F1CBA307086BDE801793D939200BBA2AF0E3B8D6DD7BCDAE0463C46825D3D908398BCB97993BD62A4493DAA2D003D65B6823DD89C643C4C8D09BD8AA5963D781F33BD3E92A23D5C95ACBC3E742F3CCE958D3D46CC3A3B25C56D3DA2F70D3D2F59A83DEBA601BD8E96BEBB793D4D3C7CFD50BCB16062BD0C90E3BC6020FABC5903A4BDE8CA1FBD739D633C77B836BD19BB08BB4AB435BC40229FBDD84A203D9217CEBC6689A1BDF2A8473CFA6987BD4E728FBC18928D3D54463ABB9CF132BC88AF60BD0F9B89BDAF8E72BDD7F83FBD8858B83BB4338C3D54B28B3DA6467EBD08D25D3B29F413BCC0C91E3BA832F83C5FBF993DC70B2D3DE2342A3D2691953C8ADF6E3C959F313DD20602BDED0F243DDA1008BDA1EE9F3C199E2EBD320A813D8B8F25BD262ECB3BB5E6583DF47DA23D6330A2BD7E87003D7085663D774256BDEE30253D5BE7C2BC0BC54EBDEFA4AE3B99A6A63D3F1C6C3CE0040CBDE9AE46BC649EBBBCC7757CBD7899AB3C13F0033D4B04523DFBEBB53C0A6DCBBC65674D3D3FA28E3DE86471BD7C457F3DBF025FBDEC298C3D28401F3D06C5C8BCC5E1A1BC08D9A3BD823F973D804900BC3A11C43CC318A33D3DF067BD2EE7483D02BB5ABDA752093C3AB7D4BCE283913DA63991BB27CF7CBB9F2D673D0E3629BD7F5490BD048F6F3C3BE880BC9BFA9D3C90F1F43CED233D3D20E46D3D71B38ABDD2C599BD4F80A9BC2A26BA3BB6C5B2BCADB1153DA5374F3DF3F2F03C06CD7DBD9F5EA63D906B10BD2CED9F3D8D78CA3C1B3606BDD44D703AAF63153981579CBD4805203DED63363C6185EDBB9600F93C326517BDAEA155BD89028E3DE0A09E3D19B89E3C398C153DBC07553D9B76C53C022D9C3D13A00EBD2E1294BB81F0E3BC7881E6BC9D7531BD1F3F84BDC190B0BB6B40F7BC76CD84BDF6A786BDBA1E873DE83008BC1C4BDE3B651826BD56ED72BD8D6D32BD414E96BC14AD0EBD9F7C273DF8242B3B278342BDD8E0053DC74283BAEFAB99BDB030E2BC561B523D00817B3D50A539BDEB9455BDDCD192BDCC69953DCD621D3DD36A97BCD63C09BC37D15DBD72B38C3DCD3C75BDE184D03C882EA03D3D10A43DE57F033D00E93E3D67EE533DDF4D10BD6068823C375D863D2F1F11BDF898843D11002ABDD088BF3C5CF369BD325C72BDD79F3ABD292DA6BD8D03303D6929173DCC2BF13C3B7C3A3C4EABA6BDDDAAA3BDBCCD1A3C34A1513C6660903B5737ECBC684FC23CB3F67EBD7FB9BC3C3221BABC645CCC3C13802D3DB517393D3E08073D2BD6A83D4B5B3BBC431629BB05D982BC3AB885BD2E436D3DADD405BDCE0FF6BC605C893DBF78DA3B41F726BDA6D179BD57716BBDAD01A43C33FE89BD8B9BCDBA2F8820BD89FC2A3D300DEDBCF721043DAC5012BBB7FA9C3C29915DBDF51B75BDBCC33F3D991CE93C867A3C3CC410EB3C4730663DEC9CFC3C5603FEBC55272CBC2A24633C3E49003DCCC2623CBE06863DC4E926BD72C24B3DE1EE973D55DE67BDC7C22A3C854E673DEE9DB93C90B0AE3C96206CBDE3D754BDBF87C73CCB8E8F3DE155A63D80D8F8BBABBF943D7F8A863D980F7BBD14D9723B001483BD98431D3D1D70463DAB989BBD92ADA1BD54968D3D8C2541BD1F76713D6828A4BD8A848B392AA1883DA6D39BBDAA8B2E3D7C15DDB88280153C6E7E9F3DC42B993D440F6C3DA679CF3CD30A7D3CC7264CBDAA7D373D2742873DACC92CBD47C8413D79E8753DC9E7453D9CF873BD22B194BDAFC186BD4939363C797E8DBD77099CBC14E17BBDAC8E203DE255F43C082AEDBCC04BA0BD3EF881BC542AA0BDF0E4A0BD03B880BD071E27BD9F27F33CD0A3E1BC0615873DC28A87BDF017B43CDEAB743C4D370C3DF55D983D257B75BDC243B9BC0C5A86BD8B4030BC228C5EBDE7783EBDDEED4EBBA22E203C6B43A63BCB509D3D4DD9643C604D06BB1612F13C0EBE2ABDDC16493B95AA9FBD194D3CBDC5278E3D2DC64BBDB39F54BD1DD2883DFC8306BD3FE182BDB493E2BC7801803DD37F933D69FE5C3DD5C34ABD32188CBD17B01EBDAD44D8BC">
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %c58 = arith.constant 58 : index
    %c6 = arith.constant 6 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%2: index):  // 2 preds: ^bb0, ^bb11
    %3 = arith.cmpi slt, %2, %c1 : index
    cf.cond_br %3, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb10
    %5 = arith.cmpi slt, %4, %c6 : index
    cf.cond_br %5, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%6: index):  // 2 preds: ^bb4, ^bb9
    %7 = arith.cmpi slt, %6, %c58 : index
    cf.cond_br %7, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%c0 : index)
  ^bb7(%8: index):  // 2 preds: ^bb6, ^bb8
    %9 = arith.cmpi slt, %8, %c58 : index
    cf.cond_br %9, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %10 = memref.load %0[%4] : memref<6xf32>
    memref.store %10, %arg1[%2, %4, %6, %8] : memref<1x6x58x58xf32>
    %11 = arith.addi %8, %c1 : index
    cf.br ^bb7(%11 : index)
  ^bb9:  // pred: ^bb7
    %12 = arith.addi %6, %c1 : index
    cf.br ^bb5(%12 : index)
  ^bb10:  // pred: ^bb5
    %13 = arith.addi %4, %c1 : index
    cf.br ^bb3(%13 : index)
  ^bb11:  // pred: ^bb3
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ConvertMathToLLVMPass (convert-math-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %c58 = arith.constant 58 : index
    %c6 = arith.constant 6 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%2: index):  // 2 preds: ^bb0, ^bb11
    %3 = arith.cmpi slt, %2, %c1 : index
    cf.cond_br %3, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb10
    %5 = arith.cmpi slt, %4, %c6 : index
    cf.cond_br %5, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%6: index):  // 2 preds: ^bb4, ^bb9
    %7 = arith.cmpi slt, %6, %c58 : index
    cf.cond_br %7, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%c0 : index)
  ^bb7(%8: index):  // 2 preds: ^bb6, ^bb8
    %9 = arith.cmpi slt, %8, %c58 : index
    cf.cond_br %9, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %10 = memref.load %0[%4] : memref<6xf32>
    memref.store %10, %arg1[%2, %4, %6, %8] : memref<1x6x58x58xf32>
    %11 = arith.addi %8, %c1 : index
    cf.br ^bb7(%11 : index)
  ^bb9:  // pred: ^bb7
    %12 = arith.addi %6, %c1 : index
    cf.br ^bb5(%12 : index)
  ^bb10:  // pred: ^bb5
    %13 = arith.addi %4, %c1 : index
    cf.br ^bb3(%13 : index)
  ^bb11:  // pred: ^bb3
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ConvertMathToLibm (convert-math-to-libm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %c58 = arith.constant 58 : index
    %c6 = arith.constant 6 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %1 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    cf.br ^bb1(%c0 : index)
  ^bb1(%2: index):  // 2 preds: ^bb0, ^bb11
    %3 = arith.cmpi slt, %2, %c1 : index
    cf.cond_br %3, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb10
    %5 = arith.cmpi slt, %4, %c6 : index
    cf.cond_br %5, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%6: index):  // 2 preds: ^bb4, ^bb9
    %7 = arith.cmpi slt, %6, %c58 : index
    cf.cond_br %7, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%c0 : index)
  ^bb7(%8: index):  // 2 preds: ^bb6, ^bb8
    %9 = arith.cmpi slt, %8, %c58 : index
    cf.cond_br %9, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %10 = memref.load %0[%4] : memref<6xf32>
    memref.store %10, %arg1[%2, %4, %6, %8] : memref<1x6x58x58xf32>
    %11 = arith.addi %8, %c1 : index
    cf.br ^bb7(%11 : index)
  ^bb9:  // pred: ^bb7
    %12 = arith.addi %6, %c1 : index
    cf.br ^bb5(%12 : index)
  ^bb10:  // pred: ^bb5
    %13 = arith.addi %4, %c1 : index
    cf.br ^bb3(%13 : index)
  ^bb11:  // pred: ^bb3
    %14 = arith.addi %2, %c1 : index
    cf.br ^bb1(%14 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %1, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ArithToLLVMConversionPass (convert-arith-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = llvm.mlir.constant(58 : index) : i64
    %1 = llvm.mlir.constant(6 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %6 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    cf.br ^bb1(%4 : index)
  ^bb1(%7: index):  // 2 preds: ^bb0, ^bb11
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = llvm.icmp "slt" %8, %2 : i64
    cf.cond_br %9, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%4 : index)
  ^bb3(%10: index):  // 2 preds: ^bb2, ^bb10
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = llvm.icmp "slt" %11, %1 : i64
    cf.cond_br %12, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%4 : index)
  ^bb5(%13: index):  // 2 preds: ^bb4, ^bb9
    %14 = builtin.unrealized_conversion_cast %13 : index to i64
    %15 = llvm.icmp "slt" %14, %0 : i64
    cf.cond_br %15, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%4 : index)
  ^bb7(%16: index):  // 2 preds: ^bb6, ^bb8
    %17 = builtin.unrealized_conversion_cast %16 : index to i64
    %18 = llvm.icmp "slt" %17, %0 : i64
    cf.cond_br %18, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %19 = memref.load %5[%10] : memref<6xf32>
    memref.store %19, %arg1[%7, %10, %13, %16] : memref<1x6x58x58xf32>
    %20 = llvm.add %17, %2  : i64
    %21 = builtin.unrealized_conversion_cast %20 : i64 to index
    cf.br ^bb7(%21 : index)
  ^bb9:  // pred: ^bb7
    %22 = llvm.add %14, %2  : i64
    %23 = builtin.unrealized_conversion_cast %22 : i64 to index
    cf.br ^bb5(%23 : index)
  ^bb10:  // pred: ^bb5
    %24 = llvm.add %11, %2  : i64
    %25 = builtin.unrealized_conversion_cast %24 : i64 to index
    cf.br ^bb3(%25 : index)
  ^bb11:  // pred: ^bb3
    %26 = llvm.add %8, %2  : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    cf.br ^bb1(%27 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %6, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After NormalizeMemRefs (normalize-memrefs) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  memref.global "private" constant @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32> = dense<"0x
  memref.global "private" constant @__constant_6xf32 : memref<6xf32> = dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = llvm.mlir.constant(58 : index) : i64
    %1 = llvm.mlir.constant(6 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = builtin.unrealized_conversion_cast %3 : i64 to index
    %5 = memref.get_global @__constant_6xf32 : memref<6xf32>
    %6 = memref.get_global @__constant_6x3x7x7xf32 : memref<6x3x7x7xf32>
    cf.br ^bb1(%4 : index)
  ^bb1(%7: index):  // 2 preds: ^bb0, ^bb11
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = llvm.icmp "slt" %8, %2 : i64
    cf.cond_br %9, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%4 : index)
  ^bb3(%10: index):  // 2 preds: ^bb2, ^bb10
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = llvm.icmp "slt" %11, %1 : i64
    cf.cond_br %12, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%4 : index)
  ^bb5(%13: index):  // 2 preds: ^bb4, ^bb9
    %14 = builtin.unrealized_conversion_cast %13 : index to i64
    %15 = llvm.icmp "slt" %14, %0 : i64
    cf.cond_br %15, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%4 : index)
  ^bb7(%16: index):  // 2 preds: ^bb6, ^bb8
    %17 = builtin.unrealized_conversion_cast %16 : index to i64
    %18 = llvm.icmp "slt" %17, %0 : i64
    cf.cond_br %18, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %19 = memref.load %5[%10] : memref<6xf32>
    memref.store %19, %arg1[%7, %10, %13, %16] : memref<1x6x58x58xf32>
    %20 = llvm.add %17, %2  : i64
    %21 = builtin.unrealized_conversion_cast %20 : i64 to index
    cf.br ^bb7(%21 : index)
  ^bb9:  // pred: ^bb7
    %22 = llvm.add %14, %2  : i64
    %23 = builtin.unrealized_conversion_cast %22 : i64 to index
    cf.br ^bb5(%23 : index)
  ^bb10:  // pred: ^bb5
    %24 = llvm.add %11, %2  : i64
    %25 = builtin.unrealized_conversion_cast %24 : i64 to index
    cf.br ^bb3(%25 : index)
  ^bb11:  // pred: ^bb3
    %26 = llvm.add %8, %2  : i64
    %27 = builtin.unrealized_conversion_cast %26 : i64 to index
    cf.br ^bb1(%27 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %6, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = builtin.unrealized_conversion_cast %arg1 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(58 : index) : i64
    %2 = llvm.mlir.constant(6 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(6 : index) : i64
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.zero : !llvm.ptr
    %9 = llvm.getelementptr %8[%6] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %11 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %12 = llvm.getelementptr %11[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %13 = llvm.mlir.constant(3735928559 : index) : i64
    %14 = llvm.inttoptr %13 : i64 to !llvm.ptr
    %15 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %16 = llvm.insertvalue %14, %15[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.insertvalue %12, %16[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = llvm.insertvalue %18, %17[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %20 = llvm.insertvalue %6, %19[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %21 = llvm.insertvalue %7, %20[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %22 = llvm.mlir.constant(6 : index) : i64
    %23 = llvm.mlir.constant(3 : index) : i64
    %24 = llvm.mlir.constant(7 : index) : i64
    %25 = llvm.mlir.constant(7 : index) : i64
    %26 = llvm.mlir.constant(1 : index) : i64
    %27 = llvm.mlir.constant(49 : index) : i64
    %28 = llvm.mlir.constant(147 : index) : i64
    %29 = llvm.mlir.constant(882 : index) : i64
    %30 = llvm.mlir.zero : !llvm.ptr
    %31 = llvm.getelementptr %30[%29] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %32 = llvm.ptrtoint %31 : !llvm.ptr to i64
    %33 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %34 = llvm.getelementptr %33[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %35 = llvm.mlir.constant(3735928559 : index) : i64
    %36 = llvm.inttoptr %35 : i64 to !llvm.ptr
    %37 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %38 = llvm.insertvalue %36, %37[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %39 = llvm.insertvalue %34, %38[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.mlir.constant(0 : index) : i64
    %41 = llvm.insertvalue %40, %39[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %22, %41[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %23, %42[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.insertvalue %24, %43[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %25, %44[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %28, %45[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %27, %46[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %25, %47[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %26, %48[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = builtin.unrealized_conversion_cast %49 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<6x3x7x7xf32>
    cf.br ^bb1(%5 : index)
  ^bb1(%51: index):  // 2 preds: ^bb0, ^bb11
    %52 = builtin.unrealized_conversion_cast %51 : index to i64
    %53 = builtin.unrealized_conversion_cast %51 : index to i64
    %54 = llvm.icmp "slt" %53, %3 : i64
    cf.cond_br %54, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%5 : index)
  ^bb3(%55: index):  // 2 preds: ^bb2, ^bb10
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = builtin.unrealized_conversion_cast %55 : index to i64
    %58 = llvm.icmp "slt" %57, %2 : i64
    cf.cond_br %58, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%5 : index)
  ^bb5(%59: index):  // 2 preds: ^bb4, ^bb9
    %60 = builtin.unrealized_conversion_cast %59 : index to i64
    %61 = builtin.unrealized_conversion_cast %59 : index to i64
    %62 = llvm.icmp "slt" %61, %1 : i64
    cf.cond_br %62, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%5 : index)
  ^bb7(%63: index):  // 2 preds: ^bb6, ^bb8
    %64 = builtin.unrealized_conversion_cast %63 : index to i64
    %65 = builtin.unrealized_conversion_cast %63 : index to i64
    %66 = llvm.icmp "slt" %65, %1 : i64
    cf.cond_br %66, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %67 = llvm.extractvalue %21[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %68 = llvm.getelementptr %67[%56] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %69 = llvm.load %68 : !llvm.ptr -> f32
    %70 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %71 = llvm.mlir.constant(20184 : index) : i64
    %72 = llvm.mul %52, %71  : i64
    %73 = llvm.mlir.constant(3364 : index) : i64
    %74 = llvm.mul %56, %73  : i64
    %75 = llvm.add %72, %74  : i64
    %76 = llvm.mlir.constant(58 : index) : i64
    %77 = llvm.mul %60, %76  : i64
    %78 = llvm.add %75, %77  : i64
    %79 = llvm.add %78, %64  : i64
    %80 = llvm.getelementptr %70[%79] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %69, %80 : f32, !llvm.ptr
    %81 = llvm.add %65, %3  : i64
    %82 = builtin.unrealized_conversion_cast %81 : i64 to index
    cf.br ^bb7(%82 : index)
  ^bb9:  // pred: ^bb7
    %83 = llvm.add %61, %3  : i64
    %84 = builtin.unrealized_conversion_cast %83 : i64 to index
    cf.br ^bb5(%84 : index)
  ^bb10:  // pred: ^bb5
    %85 = llvm.add %57, %3  : i64
    %86 = builtin.unrealized_conversion_cast %85 : i64 to index
    cf.br ^bb3(%86 : index)
  ^bb11:  // pred: ^bb3
    %87 = llvm.add %53, %3  : i64
    %88 = builtin.unrealized_conversion_cast %87 : i64 to index
    cf.br ^bb1(%88 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %50, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ExpandOps (memref-expand) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = builtin.unrealized_conversion_cast %arg1 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(58 : index) : i64
    %2 = llvm.mlir.constant(6 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(6 : index) : i64
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.zero : !llvm.ptr
    %9 = llvm.getelementptr %8[6] : (!llvm.ptr) -> !llvm.ptr, f32
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %11 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %12 = llvm.getelementptr %11[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %13 = llvm.mlir.constant(3735928559 : index) : i64
    %14 = llvm.inttoptr %13 : i64 to !llvm.ptr
    %15 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %16 = llvm.insertvalue %14, %15[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.insertvalue %12, %16[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = llvm.insertvalue %18, %17[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %20 = llvm.insertvalue %6, %19[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %21 = llvm.insertvalue %7, %20[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %22 = llvm.mlir.constant(6 : index) : i64
    %23 = llvm.mlir.constant(3 : index) : i64
    %24 = llvm.mlir.constant(7 : index) : i64
    %25 = llvm.mlir.constant(7 : index) : i64
    %26 = llvm.mlir.constant(1 : index) : i64
    %27 = llvm.mlir.constant(49 : index) : i64
    %28 = llvm.mlir.constant(147 : index) : i64
    %29 = llvm.mlir.constant(882 : index) : i64
    %30 = llvm.mlir.zero : !llvm.ptr
    %31 = llvm.getelementptr %30[882] : (!llvm.ptr) -> !llvm.ptr, f32
    %32 = llvm.ptrtoint %31 : !llvm.ptr to i64
    %33 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %34 = llvm.getelementptr %33[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %35 = llvm.mlir.constant(3735928559 : index) : i64
    %36 = llvm.inttoptr %35 : i64 to !llvm.ptr
    %37 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %38 = llvm.insertvalue %36, %37[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %39 = llvm.insertvalue %34, %38[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.mlir.constant(0 : index) : i64
    %41 = llvm.insertvalue %40, %39[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %22, %41[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %23, %42[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.insertvalue %24, %43[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %25, %44[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %28, %45[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %27, %46[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %25, %47[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %26, %48[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = builtin.unrealized_conversion_cast %49 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<6x3x7x7xf32>
    cf.br ^bb1(%5 : index)
  ^bb1(%51: index):  // 2 preds: ^bb0, ^bb11
    %52 = builtin.unrealized_conversion_cast %51 : index to i64
    %53 = builtin.unrealized_conversion_cast %51 : index to i64
    %54 = llvm.icmp "slt" %53, %3 : i64
    cf.cond_br %54, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%5 : index)
  ^bb3(%55: index):  // 2 preds: ^bb2, ^bb10
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = builtin.unrealized_conversion_cast %55 : index to i64
    %58 = llvm.icmp "slt" %57, %2 : i64
    cf.cond_br %58, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%5 : index)
  ^bb5(%59: index):  // 2 preds: ^bb4, ^bb9
    %60 = builtin.unrealized_conversion_cast %59 : index to i64
    %61 = builtin.unrealized_conversion_cast %59 : index to i64
    %62 = llvm.icmp "slt" %61, %1 : i64
    cf.cond_br %62, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%5 : index)
  ^bb7(%63: index):  // 2 preds: ^bb6, ^bb8
    %64 = builtin.unrealized_conversion_cast %63 : index to i64
    %65 = builtin.unrealized_conversion_cast %63 : index to i64
    %66 = llvm.icmp "slt" %65, %1 : i64
    cf.cond_br %66, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %67 = llvm.getelementptr %12[%56] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %68 = llvm.load %67 : !llvm.ptr -> f32
    %69 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %70 = llvm.mlir.constant(20184 : index) : i64
    %71 = llvm.mul %52, %70  : i64
    %72 = llvm.mlir.constant(3364 : index) : i64
    %73 = llvm.mul %56, %72  : i64
    %74 = llvm.add %71, %73  : i64
    %75 = llvm.mlir.constant(58 : index) : i64
    %76 = llvm.mul %60, %75  : i64
    %77 = llvm.add %74, %76  : i64
    %78 = llvm.add %77, %64  : i64
    %79 = llvm.getelementptr %69[%78] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %68, %79 : f32, !llvm.ptr
    %80 = llvm.add %65, %3  : i64
    %81 = builtin.unrealized_conversion_cast %80 : i64 to index
    cf.br ^bb7(%81 : index)
  ^bb9:  // pred: ^bb7
    %82 = llvm.add %61, %3  : i64
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    cf.br ^bb5(%83 : index)
  ^bb10:  // pred: ^bb5
    %84 = llvm.add %57, %3  : i64
    %85 = builtin.unrealized_conversion_cast %84 : i64 to index
    cf.br ^bb3(%85 : index)
  ^bb11:  // pred: ^bb3
    %86 = llvm.add %53, %3  : i64
    %87 = builtin.unrealized_conversion_cast %86 : i64 to index
    cf.br ^bb1(%87 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %50, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  func.func @conv2d(%arg0: memref<1x3x64x64xf32>, %arg1: memref<1x6x58x58xf32>) {
    %0 = builtin.unrealized_conversion_cast %arg1 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.mlir.constant(58 : index) : i64
    %2 = llvm.mlir.constant(6 : index) : i64
    %3 = llvm.mlir.constant(1 : index) : i64
    %4 = llvm.mlir.constant(0 : index) : i64
    %5 = builtin.unrealized_conversion_cast %4 : i64 to index
    %6 = llvm.mlir.constant(6 : index) : i64
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.zero : !llvm.ptr
    %9 = llvm.getelementptr %8[6] : (!llvm.ptr) -> !llvm.ptr, f32
    %10 = llvm.ptrtoint %9 : !llvm.ptr to i64
    %11 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %12 = llvm.getelementptr %11[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %13 = llvm.mlir.constant(3735928559 : index) : i64
    %14 = llvm.inttoptr %13 : i64 to !llvm.ptr
    %15 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %16 = llvm.insertvalue %14, %15[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.insertvalue %12, %16[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %18 = llvm.mlir.constant(0 : index) : i64
    %19 = llvm.insertvalue %18, %17[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %20 = llvm.insertvalue %6, %19[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %21 = llvm.insertvalue %7, %20[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %22 = llvm.mlir.constant(6 : index) : i64
    %23 = llvm.mlir.constant(3 : index) : i64
    %24 = llvm.mlir.constant(7 : index) : i64
    %25 = llvm.mlir.constant(7 : index) : i64
    %26 = llvm.mlir.constant(1 : index) : i64
    %27 = llvm.mlir.constant(49 : index) : i64
    %28 = llvm.mlir.constant(147 : index) : i64
    %29 = llvm.mlir.constant(882 : index) : i64
    %30 = llvm.mlir.zero : !llvm.ptr
    %31 = llvm.getelementptr %30[882] : (!llvm.ptr) -> !llvm.ptr, f32
    %32 = llvm.ptrtoint %31 : !llvm.ptr to i64
    %33 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %34 = llvm.getelementptr %33[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %35 = llvm.mlir.constant(3735928559 : index) : i64
    %36 = llvm.inttoptr %35 : i64 to !llvm.ptr
    %37 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %38 = llvm.insertvalue %36, %37[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %39 = llvm.insertvalue %34, %38[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.mlir.constant(0 : index) : i64
    %41 = llvm.insertvalue %40, %39[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = llvm.insertvalue %22, %41[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %43 = llvm.insertvalue %23, %42[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %44 = llvm.insertvalue %24, %43[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %45 = llvm.insertvalue %25, %44[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %46 = llvm.insertvalue %28, %45[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %47 = llvm.insertvalue %27, %46[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %48 = llvm.insertvalue %25, %47[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %49 = llvm.insertvalue %26, %48[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %50 = builtin.unrealized_conversion_cast %49 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<6x3x7x7xf32>
    cf.br ^bb1(%5 : index)
  ^bb1(%51: index):  // 2 preds: ^bb0, ^bb11
    %52 = builtin.unrealized_conversion_cast %51 : index to i64
    %53 = builtin.unrealized_conversion_cast %51 : index to i64
    %54 = llvm.icmp "slt" %53, %3 : i64
    cf.cond_br %54, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%5 : index)
  ^bb3(%55: index):  // 2 preds: ^bb2, ^bb10
    %56 = builtin.unrealized_conversion_cast %55 : index to i64
    %57 = builtin.unrealized_conversion_cast %55 : index to i64
    %58 = llvm.icmp "slt" %57, %2 : i64
    cf.cond_br %58, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%5 : index)
  ^bb5(%59: index):  // 2 preds: ^bb4, ^bb9
    %60 = builtin.unrealized_conversion_cast %59 : index to i64
    %61 = builtin.unrealized_conversion_cast %59 : index to i64
    %62 = llvm.icmp "slt" %61, %1 : i64
    cf.cond_br %62, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    cf.br ^bb7(%5 : index)
  ^bb7(%63: index):  // 2 preds: ^bb6, ^bb8
    %64 = builtin.unrealized_conversion_cast %63 : index to i64
    %65 = builtin.unrealized_conversion_cast %63 : index to i64
    %66 = llvm.icmp "slt" %65, %1 : i64
    cf.cond_br %66, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %67 = llvm.getelementptr %12[%56] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %68 = llvm.load %67 : !llvm.ptr -> f32
    %69 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %70 = llvm.mlir.constant(20184 : index) : i64
    %71 = llvm.mul %52, %70  : i64
    %72 = llvm.mlir.constant(3364 : index) : i64
    %73 = llvm.mul %56, %72  : i64
    %74 = llvm.add %71, %73  : i64
    %75 = llvm.mlir.constant(58 : index) : i64
    %76 = llvm.mul %60, %75  : i64
    %77 = llvm.add %74, %76  : i64
    %78 = llvm.add %77, %64  : i64
    %79 = llvm.getelementptr %69[%78] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %68, %79 : f32, !llvm.ptr
    %80 = llvm.add %65, %3  : i64
    %81 = builtin.unrealized_conversion_cast %80 : i64 to index
    cf.br ^bb7(%81 : index)
  ^bb9:  // pred: ^bb7
    %82 = llvm.add %61, %3  : i64
    %83 = builtin.unrealized_conversion_cast %82 : i64 to index
    cf.br ^bb5(%83 : index)
  ^bb10:  // pred: ^bb5
    %84 = llvm.add %57, %3  : i64
    %85 = builtin.unrealized_conversion_cast %84 : i64 to index
    cf.br ^bb3(%85 : index)
  ^bb11:  // pred: ^bb3
    %86 = llvm.add %53, %3  : i64
    %87 = builtin.unrealized_conversion_cast %86 : i64 to index
    cf.br ^bb1(%87 : index)
  ^bb12:  // pred: ^bb1
    call @conv2d_kernel_0(%arg0, %50, %arg1) : (memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>) -> ()
    return
  }
  func.func private @conv2d_kernel_0(memref<1x3x64x64xf32>, memref<6x3x7x7xf32>, memref<1x6x58x58xf32>)
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  llvm.func @conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(12288 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(4096 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(64 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.mlir.constant(64 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(64 : index) : i64
    %18 = llvm.insertvalue %17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.insertvalue %19, %18[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %22 = llvm.insertvalue %arg1, %21[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg1, %22[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.mlir.constant(1 : index) : i64
    %27 = llvm.insertvalue %26, %25[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.mlir.constant(20184 : index) : i64
    %29 = llvm.insertvalue %28, %27[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.mlir.constant(6 : index) : i64
    %31 = llvm.insertvalue %30, %29[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %32 = llvm.mlir.constant(3364 : index) : i64
    %33 = llvm.insertvalue %32, %31[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %34 = llvm.mlir.constant(58 : index) : i64
    %35 = llvm.insertvalue %34, %33[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %36 = llvm.mlir.constant(58 : index) : i64
    %37 = llvm.insertvalue %36, %35[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %38 = llvm.mlir.constant(58 : index) : i64
    %39 = llvm.insertvalue %38, %37[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.mlir.constant(1 : index) : i64
    %41 = llvm.insertvalue %40, %39[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = builtin.unrealized_conversion_cast %41 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x6x58x58xf32>
    %43 = builtin.unrealized_conversion_cast %42 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %44 = llvm.mlir.constant(58 : index) : i64
    %45 = llvm.mlir.constant(6 : index) : i64
    %46 = llvm.mlir.constant(1 : index) : i64
    %47 = llvm.mlir.constant(0 : index) : i64
    %48 = builtin.unrealized_conversion_cast %47 : i64 to index
    %49 = llvm.mlir.constant(6 : index) : i64
    %50 = llvm.mlir.constant(1 : index) : i64
    %51 = llvm.mlir.zero : !llvm.ptr
    %52 = llvm.getelementptr %51[6] : (!llvm.ptr) -> !llvm.ptr, f32
    %53 = llvm.ptrtoint %52 : !llvm.ptr to i64
    %54 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %55 = llvm.getelementptr %54[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %56 = llvm.mlir.constant(3735928559 : index) : i64
    %57 = llvm.inttoptr %56 : i64 to !llvm.ptr
    %58 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %59 = llvm.insertvalue %57, %58[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.insertvalue %55, %59[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %61 = llvm.mlir.constant(0 : index) : i64
    %62 = llvm.insertvalue %61, %60[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %63 = llvm.insertvalue %49, %62[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %64 = llvm.insertvalue %50, %63[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %65 = llvm.mlir.constant(6 : index) : i64
    %66 = llvm.mlir.constant(3 : index) : i64
    %67 = llvm.mlir.constant(7 : index) : i64
    %68 = llvm.mlir.constant(7 : index) : i64
    %69 = llvm.mlir.constant(1 : index) : i64
    %70 = llvm.mlir.constant(49 : index) : i64
    %71 = llvm.mlir.constant(147 : index) : i64
    %72 = llvm.mlir.constant(882 : index) : i64
    %73 = llvm.mlir.zero : !llvm.ptr
    %74 = llvm.getelementptr %73[882] : (!llvm.ptr) -> !llvm.ptr, f32
    %75 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %76 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %77 = llvm.getelementptr %76[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %78 = llvm.mlir.constant(3735928559 : index) : i64
    %79 = llvm.inttoptr %78 : i64 to !llvm.ptr
    %80 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %81 = llvm.insertvalue %79, %80[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %82 = llvm.insertvalue %77, %81[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %83 = llvm.mlir.constant(0 : index) : i64
    %84 = llvm.insertvalue %83, %82[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %85 = llvm.insertvalue %65, %84[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %86 = llvm.insertvalue %66, %85[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %87 = llvm.insertvalue %67, %86[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %88 = llvm.insertvalue %68, %87[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %89 = llvm.insertvalue %71, %88[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %90 = llvm.insertvalue %70, %89[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %91 = llvm.insertvalue %68, %90[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %92 = llvm.insertvalue %69, %91[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %93 = builtin.unrealized_conversion_cast %92 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<6x3x7x7xf32>
    llvm.br ^bb1(%47 : i64)
  ^bb1(%94: i64):  // 2 preds: ^bb0, ^bb11
    %95 = builtin.unrealized_conversion_cast %94 : i64 to index
    %96 = builtin.unrealized_conversion_cast %95 : index to i64
    %97 = builtin.unrealized_conversion_cast %95 : index to i64
    %98 = llvm.icmp "slt" %97, %46 : i64
    llvm.cond_br %98, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%47 : i64)
  ^bb3(%99: i64):  // 2 preds: ^bb2, ^bb10
    %100 = builtin.unrealized_conversion_cast %99 : i64 to index
    %101 = builtin.unrealized_conversion_cast %100 : index to i64
    %102 = builtin.unrealized_conversion_cast %100 : index to i64
    %103 = llvm.icmp "slt" %102, %45 : i64
    llvm.cond_br %103, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%47 : i64)
  ^bb5(%104: i64):  // 2 preds: ^bb4, ^bb9
    %105 = builtin.unrealized_conversion_cast %104 : i64 to index
    %106 = builtin.unrealized_conversion_cast %105 : index to i64
    %107 = builtin.unrealized_conversion_cast %105 : index to i64
    %108 = llvm.icmp "slt" %107, %44 : i64
    llvm.cond_br %108, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    llvm.br ^bb7(%47 : i64)
  ^bb7(%109: i64):  // 2 preds: ^bb6, ^bb8
    %110 = builtin.unrealized_conversion_cast %109 : i64 to index
    %111 = builtin.unrealized_conversion_cast %110 : index to i64
    %112 = builtin.unrealized_conversion_cast %110 : index to i64
    %113 = llvm.icmp "slt" %112, %44 : i64
    llvm.cond_br %113, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %114 = llvm.getelementptr %55[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %115 = llvm.load %114 : !llvm.ptr -> f32
    %116 = llvm.extractvalue %43[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.mlir.constant(20184 : index) : i64
    %118 = llvm.mul %96, %117  : i64
    %119 = llvm.mlir.constant(3364 : index) : i64
    %120 = llvm.mul %101, %119  : i64
    %121 = llvm.add %118, %120  : i64
    %122 = llvm.mlir.constant(58 : index) : i64
    %123 = llvm.mul %106, %122  : i64
    %124 = llvm.add %121, %123  : i64
    %125 = llvm.add %124, %111  : i64
    %126 = llvm.getelementptr %116[%125] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %115, %126 : f32, !llvm.ptr
    %127 = llvm.add %112, %46  : i64
    %128 = builtin.unrealized_conversion_cast %127 : i64 to index
    llvm.br ^bb7(%127 : i64)
  ^bb9:  // pred: ^bb7
    %129 = llvm.add %107, %46  : i64
    %130 = builtin.unrealized_conversion_cast %129 : i64 to index
    llvm.br ^bb5(%129 : i64)
  ^bb10:  // pred: ^bb5
    %131 = llvm.add %102, %46  : i64
    %132 = builtin.unrealized_conversion_cast %131 : i64 to index
    llvm.br ^bb3(%131 : i64)
  ^bb11:  // pred: ^bb3
    %133 = llvm.add %97, %46  : i64
    %134 = builtin.unrealized_conversion_cast %133 : i64 to index
    llvm.br ^bb1(%133 : i64)
  ^bb12:  // pred: ^bb1
    %135 = llvm.extractvalue %20[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.extractvalue %92[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.extractvalue %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @conv2d_kernel_0(%135, %136, %137) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    llvm.return
  }
  llvm.func @conv2d_kernel_0(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {sym_visibility = "private"}
}


// -----// IR Dump After ConvertFuncToLLVMPass (convert-func-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  llvm.func @conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(12288 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(4096 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(64 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.mlir.constant(64 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(64 : index) : i64
    %18 = llvm.insertvalue %17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.insertvalue %19, %18[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %22 = llvm.insertvalue %arg1, %21[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg1, %22[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.mlir.constant(1 : index) : i64
    %27 = llvm.insertvalue %26, %25[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.mlir.constant(20184 : index) : i64
    %29 = llvm.insertvalue %28, %27[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.mlir.constant(6 : index) : i64
    %31 = llvm.insertvalue %30, %29[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %32 = llvm.mlir.constant(3364 : index) : i64
    %33 = llvm.insertvalue %32, %31[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %34 = llvm.mlir.constant(58 : index) : i64
    %35 = llvm.insertvalue %34, %33[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %36 = llvm.mlir.constant(58 : index) : i64
    %37 = llvm.insertvalue %36, %35[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %38 = llvm.mlir.constant(58 : index) : i64
    %39 = llvm.insertvalue %38, %37[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.mlir.constant(1 : index) : i64
    %41 = llvm.insertvalue %40, %39[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = builtin.unrealized_conversion_cast %41 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x6x58x58xf32>
    %43 = builtin.unrealized_conversion_cast %42 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %44 = llvm.mlir.constant(58 : index) : i64
    %45 = llvm.mlir.constant(6 : index) : i64
    %46 = llvm.mlir.constant(1 : index) : i64
    %47 = llvm.mlir.constant(0 : index) : i64
    %48 = builtin.unrealized_conversion_cast %47 : i64 to index
    %49 = llvm.mlir.constant(6 : index) : i64
    %50 = llvm.mlir.constant(1 : index) : i64
    %51 = llvm.mlir.zero : !llvm.ptr
    %52 = llvm.getelementptr %51[6] : (!llvm.ptr) -> !llvm.ptr, f32
    %53 = llvm.ptrtoint %52 : !llvm.ptr to i64
    %54 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %55 = llvm.getelementptr %54[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %56 = llvm.mlir.constant(3735928559 : index) : i64
    %57 = llvm.inttoptr %56 : i64 to !llvm.ptr
    %58 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %59 = llvm.insertvalue %57, %58[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.insertvalue %55, %59[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %61 = llvm.mlir.constant(0 : index) : i64
    %62 = llvm.insertvalue %61, %60[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %63 = llvm.insertvalue %49, %62[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %64 = llvm.insertvalue %50, %63[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %65 = llvm.mlir.constant(6 : index) : i64
    %66 = llvm.mlir.constant(3 : index) : i64
    %67 = llvm.mlir.constant(7 : index) : i64
    %68 = llvm.mlir.constant(7 : index) : i64
    %69 = llvm.mlir.constant(1 : index) : i64
    %70 = llvm.mlir.constant(49 : index) : i64
    %71 = llvm.mlir.constant(147 : index) : i64
    %72 = llvm.mlir.constant(882 : index) : i64
    %73 = llvm.mlir.zero : !llvm.ptr
    %74 = llvm.getelementptr %73[882] : (!llvm.ptr) -> !llvm.ptr, f32
    %75 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %76 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %77 = llvm.getelementptr %76[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %78 = llvm.mlir.constant(3735928559 : index) : i64
    %79 = llvm.inttoptr %78 : i64 to !llvm.ptr
    %80 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %81 = llvm.insertvalue %79, %80[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %82 = llvm.insertvalue %77, %81[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %83 = llvm.mlir.constant(0 : index) : i64
    %84 = llvm.insertvalue %83, %82[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %85 = llvm.insertvalue %65, %84[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %86 = llvm.insertvalue %66, %85[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %87 = llvm.insertvalue %67, %86[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %88 = llvm.insertvalue %68, %87[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %89 = llvm.insertvalue %71, %88[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %90 = llvm.insertvalue %70, %89[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %91 = llvm.insertvalue %68, %90[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %92 = llvm.insertvalue %69, %91[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %93 = builtin.unrealized_conversion_cast %92 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<6x3x7x7xf32>
    llvm.br ^bb1(%47 : i64)
  ^bb1(%94: i64):  // 2 preds: ^bb0, ^bb11
    %95 = builtin.unrealized_conversion_cast %94 : i64 to index
    %96 = builtin.unrealized_conversion_cast %95 : index to i64
    %97 = builtin.unrealized_conversion_cast %95 : index to i64
    %98 = llvm.icmp "slt" %97, %46 : i64
    llvm.cond_br %98, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%47 : i64)
  ^bb3(%99: i64):  // 2 preds: ^bb2, ^bb10
    %100 = builtin.unrealized_conversion_cast %99 : i64 to index
    %101 = builtin.unrealized_conversion_cast %100 : index to i64
    %102 = builtin.unrealized_conversion_cast %100 : index to i64
    %103 = llvm.icmp "slt" %102, %45 : i64
    llvm.cond_br %103, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%47 : i64)
  ^bb5(%104: i64):  // 2 preds: ^bb4, ^bb9
    %105 = builtin.unrealized_conversion_cast %104 : i64 to index
    %106 = builtin.unrealized_conversion_cast %105 : index to i64
    %107 = builtin.unrealized_conversion_cast %105 : index to i64
    %108 = llvm.icmp "slt" %107, %44 : i64
    llvm.cond_br %108, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    llvm.br ^bb7(%47 : i64)
  ^bb7(%109: i64):  // 2 preds: ^bb6, ^bb8
    %110 = builtin.unrealized_conversion_cast %109 : i64 to index
    %111 = builtin.unrealized_conversion_cast %110 : index to i64
    %112 = builtin.unrealized_conversion_cast %110 : index to i64
    %113 = llvm.icmp "slt" %112, %44 : i64
    llvm.cond_br %113, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %114 = llvm.getelementptr %55[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %115 = llvm.load %114 : !llvm.ptr -> f32
    %116 = llvm.extractvalue %43[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.mlir.constant(20184 : index) : i64
    %118 = llvm.mul %96, %117  : i64
    %119 = llvm.mlir.constant(3364 : index) : i64
    %120 = llvm.mul %101, %119  : i64
    %121 = llvm.add %118, %120  : i64
    %122 = llvm.mlir.constant(58 : index) : i64
    %123 = llvm.mul %106, %122  : i64
    %124 = llvm.add %121, %123  : i64
    %125 = llvm.add %124, %111  : i64
    %126 = llvm.getelementptr %116[%125] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %115, %126 : f32, !llvm.ptr
    %127 = llvm.add %112, %46  : i64
    %128 = builtin.unrealized_conversion_cast %127 : i64 to index
    llvm.br ^bb7(%127 : i64)
  ^bb9:  // pred: ^bb7
    %129 = llvm.add %107, %46  : i64
    %130 = builtin.unrealized_conversion_cast %129 : i64 to index
    llvm.br ^bb5(%129 : i64)
  ^bb10:  // pred: ^bb5
    %131 = llvm.add %102, %46  : i64
    %132 = builtin.unrealized_conversion_cast %131 : i64 to index
    llvm.br ^bb3(%131 : i64)
  ^bb11:  // pred: ^bb3
    %133 = llvm.add %97, %46  : i64
    %134 = builtin.unrealized_conversion_cast %133 : i64 to index
    llvm.br ^bb1(%133 : i64)
  ^bb12:  // pred: ^bb1
    %135 = llvm.extractvalue %20[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.extractvalue %92[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.extractvalue %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @conv2d_kernel_0(%135, %136, %137) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    llvm.return
  }
  llvm.func @conv2d_kernel_0(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {sym_visibility = "private"}
}


// -----// IR Dump After FinalizeMemRefToLLVMConversionPass (finalize-memref-to-llvm) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  llvm.func @conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(12288 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(4096 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(64 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.mlir.constant(64 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.mlir.constant(64 : index) : i64
    %18 = llvm.insertvalue %17, %16[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.insertvalue %19, %18[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %22 = llvm.insertvalue %arg1, %21[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %23 = llvm.insertvalue %arg1, %22[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.mlir.constant(1 : index) : i64
    %27 = llvm.insertvalue %26, %25[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.mlir.constant(20184 : index) : i64
    %29 = llvm.insertvalue %28, %27[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.mlir.constant(6 : index) : i64
    %31 = llvm.insertvalue %30, %29[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %32 = llvm.mlir.constant(3364 : index) : i64
    %33 = llvm.insertvalue %32, %31[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %34 = llvm.mlir.constant(58 : index) : i64
    %35 = llvm.insertvalue %34, %33[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %36 = llvm.mlir.constant(58 : index) : i64
    %37 = llvm.insertvalue %36, %35[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %38 = llvm.mlir.constant(58 : index) : i64
    %39 = llvm.insertvalue %38, %37[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %40 = llvm.mlir.constant(1 : index) : i64
    %41 = llvm.insertvalue %40, %39[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %42 = builtin.unrealized_conversion_cast %41 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x6x58x58xf32>
    %43 = builtin.unrealized_conversion_cast %42 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %44 = llvm.mlir.constant(58 : index) : i64
    %45 = llvm.mlir.constant(6 : index) : i64
    %46 = llvm.mlir.constant(1 : index) : i64
    %47 = llvm.mlir.constant(0 : index) : i64
    %48 = builtin.unrealized_conversion_cast %47 : i64 to index
    %49 = llvm.mlir.constant(6 : index) : i64
    %50 = llvm.mlir.constant(1 : index) : i64
    %51 = llvm.mlir.zero : !llvm.ptr
    %52 = llvm.getelementptr %51[6] : (!llvm.ptr) -> !llvm.ptr, f32
    %53 = llvm.ptrtoint %52 : !llvm.ptr to i64
    %54 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %55 = llvm.getelementptr %54[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %56 = llvm.mlir.constant(3735928559 : index) : i64
    %57 = llvm.inttoptr %56 : i64 to !llvm.ptr
    %58 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %59 = llvm.insertvalue %57, %58[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.insertvalue %55, %59[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %61 = llvm.mlir.constant(0 : index) : i64
    %62 = llvm.insertvalue %61, %60[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %63 = llvm.insertvalue %49, %62[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %64 = llvm.insertvalue %50, %63[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %65 = llvm.mlir.constant(6 : index) : i64
    %66 = llvm.mlir.constant(3 : index) : i64
    %67 = llvm.mlir.constant(7 : index) : i64
    %68 = llvm.mlir.constant(7 : index) : i64
    %69 = llvm.mlir.constant(1 : index) : i64
    %70 = llvm.mlir.constant(49 : index) : i64
    %71 = llvm.mlir.constant(147 : index) : i64
    %72 = llvm.mlir.constant(882 : index) : i64
    %73 = llvm.mlir.zero : !llvm.ptr
    %74 = llvm.getelementptr %73[882] : (!llvm.ptr) -> !llvm.ptr, f32
    %75 = llvm.ptrtoint %74 : !llvm.ptr to i64
    %76 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %77 = llvm.getelementptr %76[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %78 = llvm.mlir.constant(3735928559 : index) : i64
    %79 = llvm.inttoptr %78 : i64 to !llvm.ptr
    %80 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %81 = llvm.insertvalue %79, %80[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %82 = llvm.insertvalue %77, %81[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %83 = llvm.mlir.constant(0 : index) : i64
    %84 = llvm.insertvalue %83, %82[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %85 = llvm.insertvalue %65, %84[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %86 = llvm.insertvalue %66, %85[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %87 = llvm.insertvalue %67, %86[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %88 = llvm.insertvalue %68, %87[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %89 = llvm.insertvalue %71, %88[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %90 = llvm.insertvalue %70, %89[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %91 = llvm.insertvalue %68, %90[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %92 = llvm.insertvalue %69, %91[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %93 = builtin.unrealized_conversion_cast %92 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<6x3x7x7xf32>
    llvm.br ^bb1(%47 : i64)
  ^bb1(%94: i64):  // 2 preds: ^bb0, ^bb11
    %95 = builtin.unrealized_conversion_cast %94 : i64 to index
    %96 = builtin.unrealized_conversion_cast %95 : index to i64
    %97 = builtin.unrealized_conversion_cast %95 : index to i64
    %98 = llvm.icmp "slt" %97, %46 : i64
    llvm.cond_br %98, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%47 : i64)
  ^bb3(%99: i64):  // 2 preds: ^bb2, ^bb10
    %100 = builtin.unrealized_conversion_cast %99 : i64 to index
    %101 = builtin.unrealized_conversion_cast %100 : index to i64
    %102 = builtin.unrealized_conversion_cast %100 : index to i64
    %103 = llvm.icmp "slt" %102, %45 : i64
    llvm.cond_br %103, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%47 : i64)
  ^bb5(%104: i64):  // 2 preds: ^bb4, ^bb9
    %105 = builtin.unrealized_conversion_cast %104 : i64 to index
    %106 = builtin.unrealized_conversion_cast %105 : index to i64
    %107 = builtin.unrealized_conversion_cast %105 : index to i64
    %108 = llvm.icmp "slt" %107, %44 : i64
    llvm.cond_br %108, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    llvm.br ^bb7(%47 : i64)
  ^bb7(%109: i64):  // 2 preds: ^bb6, ^bb8
    %110 = builtin.unrealized_conversion_cast %109 : i64 to index
    %111 = builtin.unrealized_conversion_cast %110 : index to i64
    %112 = builtin.unrealized_conversion_cast %110 : index to i64
    %113 = llvm.icmp "slt" %112, %44 : i64
    llvm.cond_br %113, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %114 = llvm.getelementptr %55[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %115 = llvm.load %114 : !llvm.ptr -> f32
    %116 = llvm.extractvalue %43[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %117 = llvm.mlir.constant(20184 : index) : i64
    %118 = llvm.mul %96, %117  : i64
    %119 = llvm.mlir.constant(3364 : index) : i64
    %120 = llvm.mul %101, %119  : i64
    %121 = llvm.add %118, %120  : i64
    %122 = llvm.mlir.constant(58 : index) : i64
    %123 = llvm.mul %106, %122  : i64
    %124 = llvm.add %121, %123  : i64
    %125 = llvm.add %124, %111  : i64
    %126 = llvm.getelementptr %116[%125] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %115, %126 : f32, !llvm.ptr
    %127 = llvm.add %112, %46  : i64
    %128 = builtin.unrealized_conversion_cast %127 : i64 to index
    llvm.br ^bb7(%127 : i64)
  ^bb9:  // pred: ^bb7
    %129 = llvm.add %107, %46  : i64
    %130 = builtin.unrealized_conversion_cast %129 : i64 to index
    llvm.br ^bb5(%129 : i64)
  ^bb10:  // pred: ^bb5
    %131 = llvm.add %102, %46  : i64
    %132 = builtin.unrealized_conversion_cast %131 : i64 to index
    llvm.br ^bb3(%131 : i64)
  ^bb11:  // pred: ^bb3
    %133 = llvm.add %97, %46  : i64
    %134 = builtin.unrealized_conversion_cast %133 : i64 to index
    llvm.br ^bb1(%133 : i64)
  ^bb12:  // pred: ^bb1
    %135 = llvm.extractvalue %20[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %136 = llvm.extractvalue %92[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %137 = llvm.extractvalue %41[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @conv2d_kernel_0(%135, %136, %137) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    llvm.return
  }
  llvm.func @conv2d_kernel_0(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {sym_visibility = "private"}
}


// -----// IR Dump After CSE (cse) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  llvm.func @conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %7 = llvm.mlir.constant(12288 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %9 = llvm.mlir.constant(3 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %11 = llvm.mlir.constant(4096 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %13 = llvm.mlir.constant(64 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %15 = llvm.insertvalue %13, %14[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %16 = llvm.insertvalue %13, %15[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %17 = llvm.insertvalue %5, %16[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %18 = llvm.insertvalue %arg1, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %19 = llvm.insertvalue %arg1, %18[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %20 = llvm.insertvalue %3, %19[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %21 = llvm.insertvalue %5, %20[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %22 = llvm.mlir.constant(20184 : index) : i64
    %23 = llvm.insertvalue %22, %21[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %24 = llvm.mlir.constant(6 : index) : i64
    %25 = llvm.insertvalue %24, %23[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %26 = llvm.mlir.constant(3364 : index) : i64
    %27 = llvm.insertvalue %26, %25[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %28 = llvm.mlir.constant(58 : index) : i64
    %29 = llvm.insertvalue %28, %27[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %30 = llvm.insertvalue %28, %29[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %31 = llvm.insertvalue %28, %30[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %32 = llvm.insertvalue %5, %31[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %33 = builtin.unrealized_conversion_cast %32 : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> to memref<1x6x58x58xf32>
    %34 = builtin.unrealized_conversion_cast %33 : memref<1x6x58x58xf32> to !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)>
    %35 = llvm.mlir.zero : !llvm.ptr
    %36 = llvm.getelementptr %35[6] : (!llvm.ptr) -> !llvm.ptr, f32
    %37 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %38 = llvm.getelementptr %37[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %39 = llvm.mlir.constant(3735928559 : index) : i64
    %40 = llvm.inttoptr %39 : i64 to !llvm.ptr
    %41 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %42 = llvm.insertvalue %40, %41[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %43 = llvm.insertvalue %38, %42[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %44 = llvm.insertvalue %3, %43[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %45 = llvm.insertvalue %24, %44[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %46 = llvm.mlir.constant(7 : index) : i64
    %47 = llvm.mlir.constant(49 : index) : i64
    %48 = llvm.mlir.constant(147 : index) : i64
    %49 = llvm.getelementptr %35[882] : (!llvm.ptr) -> !llvm.ptr, f32
    %50 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %51 = llvm.getelementptr %50[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    %52 = llvm.insertvalue %40, %0[0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %53 = llvm.insertvalue %51, %52[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %54 = llvm.insertvalue %3, %53[2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %55 = llvm.insertvalue %24, %54[3, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %56 = llvm.insertvalue %9, %55[3, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %57 = llvm.insertvalue %46, %56[3, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %58 = llvm.insertvalue %46, %57[3, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %59 = llvm.insertvalue %48, %58[4, 0] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %60 = llvm.insertvalue %47, %59[4, 1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %61 = llvm.insertvalue %46, %60[4, 2] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %62 = llvm.insertvalue %5, %61[4, 3] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.br ^bb1(%3 : i64)
  ^bb1(%63: i64):  // 2 preds: ^bb0, ^bb11
    %64 = builtin.unrealized_conversion_cast %63 : i64 to index
    %65 = builtin.unrealized_conversion_cast %64 : index to i64
    %66 = llvm.icmp "slt" %65, %5 : i64
    llvm.cond_br %66, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%3 : i64)
  ^bb3(%67: i64):  // 2 preds: ^bb2, ^bb10
    %68 = builtin.unrealized_conversion_cast %67 : i64 to index
    %69 = builtin.unrealized_conversion_cast %68 : index to i64
    %70 = llvm.icmp "slt" %69, %24 : i64
    llvm.cond_br %70, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%3 : i64)
  ^bb5(%71: i64):  // 2 preds: ^bb4, ^bb9
    %72 = builtin.unrealized_conversion_cast %71 : i64 to index
    %73 = builtin.unrealized_conversion_cast %72 : index to i64
    %74 = llvm.icmp "slt" %73, %28 : i64
    llvm.cond_br %74, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    llvm.br ^bb7(%3 : i64)
  ^bb7(%75: i64):  // 2 preds: ^bb6, ^bb8
    %76 = builtin.unrealized_conversion_cast %75 : i64 to index
    %77 = builtin.unrealized_conversion_cast %76 : index to i64
    %78 = llvm.icmp "slt" %77, %28 : i64
    llvm.cond_br %78, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %79 = llvm.getelementptr %38[%69] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %80 = llvm.load %79 : !llvm.ptr -> f32
    %81 = llvm.extractvalue %34[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %82 = llvm.mul %65, %22  : i64
    %83 = llvm.mul %69, %26  : i64
    %84 = llvm.add %82, %83  : i64
    %85 = llvm.mul %73, %28  : i64
    %86 = llvm.add %84, %85  : i64
    %87 = llvm.add %86, %77  : i64
    %88 = llvm.getelementptr %81[%87] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %80, %88 : f32, !llvm.ptr
    %89 = llvm.add %77, %5  : i64
    llvm.br ^bb7(%89 : i64)
  ^bb9:  // pred: ^bb7
    %90 = llvm.add %73, %5  : i64
    llvm.br ^bb5(%90 : i64)
  ^bb10:  // pred: ^bb5
    %91 = llvm.add %69, %5  : i64
    llvm.br ^bb3(%91 : i64)
  ^bb11:  // pred: ^bb3
    %92 = llvm.add %65, %5  : i64
    llvm.br ^bb1(%92 : i64)
  ^bb12:  // pred: ^bb1
    %93 = llvm.extractvalue %17[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %94 = llvm.extractvalue %62[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    %95 = llvm.extractvalue %32[1] : !llvm.struct<(ptr, ptr, i64, array<4 x i64>, array<4 x i64>)> 
    llvm.call @conv2d_kernel_0(%93, %94, %95) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    llvm.return
  }
  llvm.func @conv2d_kernel_0(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {sym_visibility = "private"}
}


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  llvm.func @conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) {
    %0 = llvm.mlir.constant(58 : index) : i64
    %1 = llvm.mlir.constant(3364 : index) : i64
    %2 = llvm.mlir.constant(6 : index) : i64
    %3 = llvm.mlir.constant(20184 : index) : i64
    %4 = llvm.mlir.constant(1 : index) : i64
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %7 = llvm.getelementptr %6[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %8 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %9 = llvm.getelementptr %8[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    llvm.br ^bb1(%5 : i64)
  ^bb1(%10: i64):  // 2 preds: ^bb0, ^bb11
    %11 = llvm.icmp "slt" %10, %4 : i64
    llvm.cond_br %11, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%5 : i64)
  ^bb3(%12: i64):  // 2 preds: ^bb2, ^bb10
    %13 = llvm.icmp "slt" %12, %2 : i64
    llvm.cond_br %13, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%5 : i64)
  ^bb5(%14: i64):  // 2 preds: ^bb4, ^bb9
    %15 = llvm.icmp "slt" %14, %0 : i64
    llvm.cond_br %15, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    llvm.br ^bb7(%5 : i64)
  ^bb7(%16: i64):  // 2 preds: ^bb6, ^bb8
    %17 = llvm.icmp "slt" %16, %0 : i64
    llvm.cond_br %17, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %18 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %19 = llvm.load %18 : !llvm.ptr -> f32
    %20 = llvm.mul %10, %3  : i64
    %21 = llvm.mul %12, %1  : i64
    %22 = llvm.add %20, %21  : i64
    %23 = llvm.mul %14, %0  : i64
    %24 = llvm.add %22, %23  : i64
    %25 = llvm.add %24, %16  : i64
    %26 = llvm.getelementptr %arg1[%25] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %19, %26 : f32, !llvm.ptr
    %27 = llvm.add %16, %4  : i64
    llvm.br ^bb7(%27 : i64)
  ^bb9:  // pred: ^bb7
    %28 = llvm.add %14, %4  : i64
    llvm.br ^bb5(%28 : i64)
  ^bb10:  // pred: ^bb5
    %29 = llvm.add %12, %4  : i64
    llvm.br ^bb3(%29 : i64)
  ^bb11:  // pred: ^bb3
    %30 = llvm.add %10, %4  : i64
    llvm.br ^bb1(%30 : i64)
  ^bb12:  // pred: ^bb1
    llvm.call @conv2d_kernel_0(%arg0, %9, %arg1) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    llvm.return
  }
  llvm.func @conv2d_kernel_0(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {sym_visibility = "private"}
}


// -----// IR Dump After ReconcileUnrealizedCasts (reconcile-unrealized-casts) //----- //
module attributes {torch.debug_module_name = "Conv2d"} {
  llvm.mlir.global private constant @__constant_6x3x7x7xf32(dense<"0xtensor<6x3x7x7xf32>) {addr_space = 0 : i32} : !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
  llvm.mlir.global private constant @__constant_6xf32(dense<[-0.0675533265, -0.0786442235, -7.646190e-02, -0.00229380699, -0.0799340755, -0.0737717897]> : tensor<6xf32>) {addr_space = 0 : i32} : !llvm.array<6 x f32>
  llvm.func @conv2d(%arg0: !llvm.ptr, %arg1: !llvm.ptr) {
    %0 = llvm.mlir.constant(58 : index) : i64
    %1 = llvm.mlir.constant(3364 : index) : i64
    %2 = llvm.mlir.constant(6 : index) : i64
    %3 = llvm.mlir.constant(20184 : index) : i64
    %4 = llvm.mlir.constant(1 : index) : i64
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.mlir.addressof @__constant_6xf32 : !llvm.ptr
    %7 = llvm.getelementptr %6[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x f32>
    %8 = llvm.mlir.addressof @__constant_6x3x7x7xf32 : !llvm.ptr
    %9 = llvm.getelementptr %8[0, 0, 0, 0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<6 x array<3 x array<7 x array<7 x f32>>>>
    llvm.br ^bb1(%5 : i64)
  ^bb1(%10: i64):  // 2 preds: ^bb0, ^bb11
    %11 = llvm.icmp "slt" %10, %4 : i64
    llvm.cond_br %11, ^bb2, ^bb12
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%5 : i64)
  ^bb3(%12: i64):  // 2 preds: ^bb2, ^bb10
    %13 = llvm.icmp "slt" %12, %2 : i64
    llvm.cond_br %13, ^bb4, ^bb11
  ^bb4:  // pred: ^bb3
    llvm.br ^bb5(%5 : i64)
  ^bb5(%14: i64):  // 2 preds: ^bb4, ^bb9
    %15 = llvm.icmp "slt" %14, %0 : i64
    llvm.cond_br %15, ^bb6, ^bb10
  ^bb6:  // pred: ^bb5
    llvm.br ^bb7(%5 : i64)
  ^bb7(%16: i64):  // 2 preds: ^bb6, ^bb8
    %17 = llvm.icmp "slt" %16, %0 : i64
    llvm.cond_br %17, ^bb8, ^bb9
  ^bb8:  // pred: ^bb7
    %18 = llvm.getelementptr %7[%12] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    %19 = llvm.load %18 : !llvm.ptr -> f32
    %20 = llvm.mul %10, %3  : i64
    %21 = llvm.mul %12, %1  : i64
    %22 = llvm.add %20, %21  : i64
    %23 = llvm.mul %14, %0  : i64
    %24 = llvm.add %22, %23  : i64
    %25 = llvm.add %24, %16  : i64
    %26 = llvm.getelementptr %arg1[%25] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %19, %26 : f32, !llvm.ptr
    %27 = llvm.add %16, %4  : i64
    llvm.br ^bb7(%27 : i64)
  ^bb9:  // pred: ^bb7
    %28 = llvm.add %14, %4  : i64
    llvm.br ^bb5(%28 : i64)
  ^bb10:  // pred: ^bb5
    %29 = llvm.add %12, %4  : i64
    llvm.br ^bb3(%29 : i64)
  ^bb11:  // pred: ^bb3
    %30 = llvm.add %10, %4  : i64
    llvm.br ^bb1(%30 : i64)
  ^bb12:  // pred: ^bb1
    llvm.call @conv2d_kernel_0(%arg0, %9, %arg1) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> ()
    llvm.return
  }
  llvm.func @conv2d_kernel_0(!llvm.ptr, !llvm.ptr, !llvm.ptr) attributes {sym_visibility = "private"}
}


